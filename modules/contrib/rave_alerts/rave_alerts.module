<?php

/**
 * @file
 * CU Alerts module
 */

// @TODO: Add hook_init w/ static var so hook exit is skipped when init fires
// @TODO: Make hook init/exit version checks configurable
// @TODO: Make javascript rounding configurable
// @TODO: add hook_cron for sites that are cached by Varnish and never fire hook_edit
// @TODO: make hook_exit and hook_cron configurable

/**
 * Implements hook_init().
 */
//function rave_alerts_init() {

  // THESE ARE ONLY NEEDED FOR THE JS IMPLEMENTATION
  //drupal_add_js(array('rave_alerts_rss_url' => variable_get('rave_alerts_rss_url', 'https://www.getrave.com/rss/DemoUniversityAlert/channel8')), 'setting');
  //drupal_add_js(array('rave_alerts_active_event' => variable_get('rave_alerts_active_event', 0)), 'setting');

  //if ($rave_alerts_read_more_url = variable_get('rave_alerts_deafult_read_more_url', NULL)) {
    //drupal_add_js(array('rave_alerts_deafult_read_more_url' => $rave_alerts_read_more_url), 'setting');
  //}
//}

/**
 * Implements hook_exit().
 * Used so this hook is called even if page is cached by Drupal
 */
function rave_alerts_exit() {
  rave_alerts_remote_data();
}

/**
 * Implements hook_menu().
 */
function rave_alerts_menu() {
  $items['admin/config/system/rave-alerts'] = array(
    'title' => 'RAVE Alerts Configuration',
    'description' => 'Configure the RAVE Alerts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rave_alerts_admin_settings_form'),
    'access arguments' => array('administer rave alerts'),
    'file' => 'rave_alerts.admin.inc',
  );
  return $items;
}

/**
 * Implemets of hook_permission().
 */
function rave_alerts_permission() {
  return array(
    'administer rave alerts' => array(
      'title' => t('Administer RAVE Alerts'),
      'description' => t('Adminstrer RAVE configuration.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function rave_alerts_block_info() {
  $blocks['rave_alerts'] = array(
    'info' => t('RAVE Alerts'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rave_alerts_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'rave_alerts':
      $data = rave_alerts_remote_data();
      $block['content'] = array(
        '#theme' => 'rave_alerts_alerts',
        '#data' => $data,
        '#attached' => array
        (
          'js' => array(drupal_get_path('module', 'rave_alerts') . "/js/rave_alerts.js"),
        ),
      );
      break;
  }
  return $block;
}

/**
 * Gets the remote RSS data and returns sanitized data.
 */
function rave_alerts_remote_data() {
  //@TODO: We only need to set $data to NULL because there is no else handling
  // if we don't get a valid 200 response
  $data = NULL;
  if (variable_get('rave_alerts_check_enable', 0)) {
    $url = variable_get('rave_alerts_rss_url', 'https://www.getrave.com/rss/DemoUniversityAlert/channel8');
    if ($cache = cache_get('rave_alert', 'cache_rave_alerts')) {
      $data = $cache->data;
    } else {
      $options = array(
        // Do fread in a second request.
        'stall_fread' => TRUE,
        // Increase domain_connections to 4 (drupal.org).
        'domain_connections' => 4,
        // If we can't connect quick (0.5 seconds), bail out.
        'connect_timeout' => 0.5,
        'dns_timeout' => 0.5,
      );
      //$response = drupal_http_request($url, array('timeout' => 1));
      httprl_request($url);
      $response = httprl_send_request();
      if ($response[$url]->code == '200') {

        //@TODO: Add check to see if the response is XML to avoid
        // Exception: String could not be parsed as XML

        // Create new XMLElement
        $data = new SimpleXMLElement($response[$url]->data);

        // Convert into a nice array for us to work with.
        $data = json_encode($data);
        $data = json_decode($data, true);
        //@TODO: Make the cache timeout configurable
        cache_set('rave_alert', $data, 'cache_rave_alerts', time() + 60);
        cache_set('rave_alert_last', $data, 'cache_rave_alerts', time() + 180);

        watchdog('rave_alerts', 'New RSS item found. Checking tokens.');
        // There is a new RSS item.  Evaluate the description for triggers.

        // assume we are going to display this
        variable_set('rave_alerts_display', 1);
        variable_set('rave_alerts_pubdate', $data['channel']['item']['pubDate']);

        if (strpos($data['channel']['item']['title'], variable_get('rave_alerts_active_text', '[ACTIVE]'))) {
           variable_set('rave_alerts_active_event', 1);
           watchdog('rave_alerts', 'ACTIVE token found');
        }

        if (strpos($data['channel']['item']['title'], variable_get('rave_alerts_clear_text', '[CLEAR]')) !== FALSE) {
           variable_set('rave_alerts_active_event', 0);
           variable_set('rave_alerts_display', 0);
           watchdog('rave_alerts', 'CLEAR token found');
        }
        // @TODO: Add option to leave all clear message up for X hours
      } else {
        // source failed to respond with 200 in 1 second.  To avoid queuing up additional
        // http requests use the last cache
        if ($cache = cache_get('rave_alert_last', 'cache_rave_alerts')) {
           dsm('use last cache');
           $data = $cache->data;
        } else {
          // using fake rss this because creating an empty SimpleXMLElement() wasn't working
          $fake_rss = '<?xml version="1.0" encoding="UTF-8"?>
          <rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
            <channel>
              <title>Test RAVE Feed</title>
              <link>http://www.getrave.com/rss/XXX/channel1</link>
              <description>Alert feed for testing Drupal RAVE module</description>
              <category>ALERTS</category>
              <dc:subject>ALERTS</dc:subject>
              <item>
                <title>Network Failure</title>
                <link />
                <description>' . variable_get('rave_alerts_network_fail_message', 'Network Failure: Please go directly to [YOUR ALERT SITE] for more information.') . '</description>
                <category>ALERTS</category>
                <pubDate>Tue, 18 Oct 2016 20:58:15 GMT</pubDate>
                <guid />
                <dc:date>2016-10-18T20:58:15Z</dc:date>
              </item>
            </channel>
          </rss>';

          //$data = new SimpleXMLElement();
          //$date->channel->description = ;

          $data = new SimpleXMLElement($fake_rss);
          // Convert into a nice array for us to work with.
          $data = json_encode($data);
          $data = json_decode($data, true);
          //@TODO: Make the cache timeout configurable
          cache_set('rave_alert', $data, 'cache_rave_alerts', time() + 60);
        }
      }
      //@TODO: Add code to handle network failure
    }
  }
  return $data;
}

/**
 * Implements hook_theme().
 */
function rave_alerts_theme($existing, $type, $theme, $path) {
  return array(
    'rave_alerts_alerts' => array(
      'variables' => array('data' => NULL, 'remote_url' => NULL),
      'template' => 'rave_alerts',
    ),
  );
}

/**
* Implements hook_flush_caches().
*/
function rave_alerts_flush_caches() {
  return array('cache_rave_alerts');
}
