<?php
/**
 * @file
 * Code for the cu_ldap feature.
 */

include_once('cu_ldap.features.inc');

/**
 * Implements hook_form_alter().
 */
function cu_ldap_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
      drupal_set_title(t('Log in'));
      if (variable_get('login_lockout', FALSE)) {
        $message = variable_get('login_lockout_message', t('Authentication to this site is temporarily disabled.  Please see <a href="http://status.colorado.edu/">status.colorado.edu</a> for more details.'));
        drupal_set_message($message, 'error');
        $form['name']['#attributes']['disabled'] = 'disabled';
        $form['pass']['#attributes']['disabled'] = 'disabled';
        $form['actions']['submit']['#attributes']['disabled'] = 'disabled';
      }
    case 'user_login_block':
      $form['name']['#title'] = t('CU Login Name');
      $form['name']['#description'] = '';
      $form['pass']['#title'] = t('IdentiKey Password');
      $form['pass']['#description'] = '';
      $form['#validate'][] = 'cu_ldap_user_login_validate';
    case 'user_profile_form':
      $form['account']['name']['#disabled'] = TRUE;
      if (user_access('access extended role assignment', $account = NULL)) {
        drupal_set_message(t('Changes to Display Name, Primary Affiliation, and Last Name fields will be overwritten by LDAP the next time this user logs in.'), 'warning');
      }
      break;
  }
}

function _is_node_form($nid) {
  $node = node_load($nid);
  return ($node->type == 'webform');
}

function cu_ldap_user_login_validate(&$form, &$form_state) {
  $uid = $form_state['uid'];
  $all = cu_users_get_users($type = 'all');

  $account = user_load($uid);
  $roles = count($account->roles);

  $nid = (isset($_GET['destination'])) ? substr($_GET['destination'], 5) : null;

  // Delete the account if created less than 60 seconds ago.
  $time = time() - 60;

  $new_account = ($account->created > $time);

  if ($roles < 2 && !isset($_GET['key']) && !$new_account && !_is_node_form($nid) && !array_key_exists($account->name, $all)) {
    // Notify user that they cannot log in to the site.
    form_set_error('name', 'You do not have permission to edit this site. If you received an email invitation, please use the link provided.');
  }
  if ($roles < 2 && !isset($_GET['key']) && $new_account && !_is_node_form($nid) && !array_key_exists($account->name, $all)) {
    // Delete account if it's new.
    user_delete($uid);
    watchdog('cu_users_log', t('User tried to log in without roles and was deleted: %uid', array('%uid' => $uid)));

    // Notify user that they cannot log in to the site.
    form_set_error('name', 'You do not have permission to edit this site. If you received an email invitation, please use the link provided.');
  }
  if ($roles < 2 && isset($_GET['destination']) && _is_node_form($nid) /*&& !array_key_exists($account->name, $all)*/) {
    $role = user_role_load_by_name("form_submitter");
    user_multiple_role_edit(array($uid), 'add_role', $role->rid);
    watchdog('cu_users_log', t('UID: %uid was given the role of form_submitter to submit webforms.', array('%uid' => $uid)));
  }
}

/**
 * Implements hook_user_insert().
 */
function cu_ldap_user_insert(&$edit, $account, $category) {
  /**
   * Logs user account creation.
   * Currently, core only logs when users are created through the
   * registration form. When ldap, however creates the account, we need
   * a log entry.  @see http://drupal.org/node/1382274
   */
  watchdog('user', 'New user: %name (%email).', array('%name' => $account->name, '%email' => $account->mail), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));
}

/**
 * Determines if this site has any site owners with a valid LDAP entry.
 *
 * A valid LDAP entry being one of a current employee or graduate student.
 *
 * @param string of valid identikey
 *
 * @return array or FALSE
 */
function cu_ldap_lookup($identikey) {
  //@TODO: replace hadcoded values with configuration from LDAP settings
  $ldap_export = cu_ldap_default_ldap_servers();
  $ldap_entries = FALSE;

  // Attempt to connect
  if ($ldap_export['directory']->name) {
    // Load the user's entry in LDAP.
    $link_identifier = ldap_connect($ldap_export['directory']->name);
    $base_dn = "dc=colorado,dc=edu";
    $filter = "uid=" . $identikey;
    $result_identifier = ldap_search($link_identifier, $base_dn, $filter);
    $ldap_entries = ldap_get_entries($link_identifier, $result_identifier);
  }

  return $ldap_entries;
}

/**
 * Custom function for checking accounts to see if realname, primary
 * affiliation, and last name are populated. If not, this updates it.
 *
 * Used by cu_ldap_user_login and cu_ldap_cron as of 2-21-18 OM.
 */
function _set_custom_user_fields($account) {
  $ldap = cu_ldap_lookup($account->name);

  // if we can't connect to LDAP, don't try to update anything
  if (!$ldap) {
    return;
  }

  if (isset($ldap['0'])) {
    // Create our own last name.
    // If there is a comma, take string before comma and set as last name?
    $name = $ldap['0'] ?? ['cn' => []];
    foreach ($name['cn'] as $last_name) {
      $hasit = strpos($last_name, ',');
      $regexit = preg_match('/^(.*?),/', $last_name);
      if ($hasit && $regexit) {
        $lastname = explode(',', $last_name);
        $last_name = $lastname['0'];
        break;
      } else {
        $last_name = '';
      }
    }
    $display_name = isset($ldap[0]['displayname'][0]) ? $ldap[0]['displayname'][0] : NULL;
    $affiliation = isset($ldap[0]['edupersonprimaryaffiliation'][0]) ? $ldap[0]['edupersonprimaryaffiliation'][0] : NULL;

  } else {
    $last_name = $account->name;
    $display_name = $account->name;
    $affiliation = NULL;
  }

  //Check to see that LDAP is returned a value.  There are no display names for accounts like OSR-TEST-OWNER
  if ($account->field_ldap_last_name != $last_name || $account->field_ldap_display_name != $display_name || $account->field_ldap_primary_affiliation != $affiliation) {

    // update account fields
    $edit = array();
    $edit['field_ldap_display_name'][LANGUAGE_NONE][0]['value'] = $display_name;
    $edit['field_ldap_last_name'][LANGUAGE_NONE][0]['value'] = $last_name;
    $edit['field_ldap_primary_affiliation'][LANGUAGE_NONE][0]['value'] = $affiliation;
    user_save($account, $edit);
  }
}

/**
 * Implements hook_user_login
 */
function cu_ldap_user_login(&$edit, $account) {
  _set_custom_user_fields($account);
}

/**
 * Implements hook_cron().
 */
function cu_ldap_cron() {
  // Only need to do this once a month.
  $last_cron_run = variable_get('cu_ldap_ping_time', 0);

  if (REQUEST_TIME > strtotime('+1 month', $last_cron_run)) {
    $users = entity_load('user');

    foreach ($users as &$account) {
      if ($account->uid > 1) {
        _set_custom_user_fields($account);
      }
    }
    // Set time variable on success.
    variable_set('cu_ldap_ping_time', REQUEST_TIME);

    // Log it in watchdog?
    watchdog('cron', 'CU_LDAP updated realnames and primary affiliation for all enabled users.');
  }
}
