<?php

/**
 * @file
 * CU Alerts module
 */

// @TODO: Make javascript rounding configurable
// @TODO: add hook_cron for sites that are cached by Varnish and never fire hook_edit
// @TODO: make hook_exit and hook_cron configurable

/**
 * Implements hook_exit().
 * Used so this hook is called even if page is cached by Drupal
 */
function cu_alerts_exit() {
  $data = cu_alerts_remote_data();

  if (variable_get('rave_alerts_pubdate', NULL) != $data['channel']['item']['pubDate']) {
    watchdog('rave_alerts', 'New RSS item found. Checking tokens.');
    // There is a new RSS item.  Evaluate the description for triggers.

    // assume we are going to display this
    variable_set('rave_alerts_display', 1);

    if (strpos($data['channel']['item']['title'], variable_get('rave_alerts_active_text', '[ACTIVE]'))) {
       variable_set('rave_alerts_pubdate', $data['channel']['item']['pubDate']);
       variable_set('rave_alerts_active_event', 1);
       watchdog('rave_alerts', 'ACTIVE token found');
    }

    if (strpos($data['channel']['item']['title'], variable_get('rave_alerts_clear_text', '[CLEAR]'))) {
       variable_set('rave_alerts_pubdate', $data['channel']['item']['pubDate']);
       variable_set('rave_alerts_active_event', 0);
       variable_set('rave_alerts_display', 0);
       watchdog('rave_alerts', 'CLEAR token found');
    }

    // @TODO: Add option to leave all clear message up for X hours
  }
}

/**
 * Implements hook_init().
 */
function cu_alerts_init() {

  //drupal_add_js(drupal_get_path('module', 'cu_alerts') . "/js/cu_alerts.js", array('scope' => 'header'));

  // Add alert variables to Drupal.settings
  drupal_add_js(array('rave_alerts_rss_url' => variable_get('rave_alerts_rss_url', 'https://www.getrave.com/rss/DemoUniversityAlert/channel8')), 'setting');
  drupal_add_js(array('rave_alerts_active_event' => variable_get('rave_alerts_active_event', 0)), 'setting');

  if ($rave_alerts_read_more_url = variable_get('rave_alerts_deafult_read_more_url', NULL)) {
    drupal_add_js(array('rave_alerts_deafult_read_more_url' => $rave_alerts_read_more_url), 'setting');
  }
}

/**
 * Implements hook_menu().
 */
function cu_alerts_menu() {
  $items['admin/config/system/rave-alerts'] = array(
    'title' => 'RAVE Alerts Configuration',
    'description' => 'Configure the CU-Boulder Alerts block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_alerts_admin_settings_form'),
    'access arguments' => array('administer cu alerts'),
    'file' => 'cu_alerts.admin.inc',
  );
  return $items;
}

/**
 * Implemets of hook_permission().
 */
function cu_alerts_permission() {
  return array(
    'administer cu alerts' => array(
      'title' => t('Administer CU Alerts'),
      'description' => t('Allows admins to administer the emergency api post hooks.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function cu_alerts_block_info() {
  $blocks['cu_alerts'] = array(
    'info' => t('CU Alerts'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cu_alerts_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'cu_alerts':
      $data = cu_alerts_remote_data();
      $block['content'] = array(
        '#theme' => 'cu_alerts_alerts',
        '#data' => $data,
        '#attached' => array
        (
          'js' => array(drupal_get_path('module', 'cu_alerts') . "/js/cu_alerts.js"),
        ),
      );
      break;
  }
  return $block;
}

/**
 * Gets the remote RSS data and returns sanitized data.
 */
function cu_alerts_remote_data() {

  $url = variable_get('rave_alerts_rss_url', 'https://www.getrave.com/rss/DemoUniversityAlert/channel8');
  if ($cache = cache_get('rave_alert-' . $url)) {
      $data = $cache->data;
  } else {
    $response = drupal_http_request($url);
    if ($response->code == '200') {

      // Create new XMLElement
      $data = new SimpleXMLElement($response->data);

      // Convert into a nice array for us to work with.
      $data = json_encode($data);
      $data = json_decode($data, true);
      cache_set('rave_alert-' . $url, $data, 'cache', time() + 60);
    }
  }
  return $data;
}

/**
 * Implements hook_theme().
 */
function cu_alerts_theme($existing, $type, $theme, $path) {
  return array(
    'cu_alerts_alerts' => array(
      'variables' => array('data' => NULL, 'remote_url' => NULL),
      'template' => 'cu_alerts',
    ),
  );
}
