<?php

/**
 * @file
 * CU Alerts module
 */

// @TODO: add hook_cron for sites that are cached by Varnish and never fire hook_edit

/**
 * Implements hook_exit().
 * Used so this hook is called even if page is cached by Drupal
 */
function cu_alerts_exit() {
  $data = cu_alerts_remote_data();

  if (variable_get('rave_alerts_pubdate', NULL) != $data['channel']['item']['pubDate']) {
    watchdog('rave_alerts', 'found a new RSS item');
    // There is a new RSS item.  Evaluate the description for triggers.

    // assume we are going to display this
    variable_set('rave_alerts_display', 1);

    if ($data['channel']['item']['description'] = variable_get('rave_alerts_active_text', 'NEEDS UNIQUER STRING TO AVOID FALSE POSITIVES')) {
       variable_set('rave_alerts_pubdate', $data['channel']['item']['pubDate']);
       variable_set('rave_alerts_active_event', 1);
       watchdog('rave_alerts', 'set to active');
    }

    if ($data['channel']['item']['description'] = variable_get('rave_alerts_clear_text', 'NEEDS UNIQUER STRING TO AVOID FALSE POSITIVES')) {
       variable_set('rave_alerts_pubdate', $data['channel']['item']['pubDate']);
       variable_set('rave_alerts_active_event', 0);
       variable_set('rave_alerts_display', 0);
       watchdog('rave_alerts', 'clear and disable alerts');
    }

    // @TODO: Add option to leave all clear message up for X hours
  }
}

/**
 * Implements hook_init().
 */
function cu_alerts_init() {

  //drupal_add_js(drupal_get_path('module', 'cu_alerts') . "/js/cu_alerts.js", array('scope' => 'header'));

  // Add alert variables to Drupal.settings
  drupal_add_js(array('rave_alerts_url' => cu_alerts_remote_url()), 'setting');
  drupal_add_js(array('rave_alerts_active_event' => variable_get('rave_alerts_active_event', 0)), 'setting');

  if ($rave_alerts_site = variable_get('rave_alerts_site', NULL)) {
    drupal_add_js(array('rave_alerts_site' => $rave_alerts_site), 'setting');
  }
}

/**
 * Implements hook_menu().
 */
function cu_alerts_menu() {
  $items['admin/config/system/cu_alerts'] = array(
    'title' => 'RAVE Alerts Configuration',
    'description' => 'Configure the CU-Boulder Alerts block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_alerts_admin_settings_form'),
    'access arguments' => array('administer cu alerts'),
    'file' => 'cu_alerts.admin.inc',
  );
  return $items;
}

/**
 * Implemets of hook_permission().
 */
function cu_alerts_permission() {
  return array(
    'administer cu alerts' => array(
      'title' => t('Administer CU Alerts'),
      'description' => t('Allows admins to administer the emergency api post hooks.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function cu_alerts_block_info() {
  $blocks['cu_alerts'] = array(
    'info' => t('CU Alerts'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cu_alerts_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'cu_alerts':
      $data = cu_alerts_data();
      $block['content'] = array(
        '#theme' => 'cu_alerts_alerts',
        '#data' => $data,
        '#attached' => array
        (
          'js' => array(drupal_get_path('module', 'cu_alerts') . "/js/cu_alerts.js"),
        ),
      );
      break;
  }
  return $block;
}

/**
 * Gets the remote JSON data and return it decoded.
 */
function cu_alerts_remote_data() {

  $url = cu_alerts_remote_url();
  if ($cache = cache_get('rave_alert-' . $url)) {
      $data = $cache->data;
  } else {
    $response = drupal_http_request($url);
    if ($response->code == '200') {

      // Create new XMLElement
      $data = new SimpleXMLElement($response->data);

      // Convert into a nice array for us to work with.
      $data = json_encode($data);
      $data = json_decode($data, true);
      cache_set('rave_alert-' . $url, $data, 'cache', time() + 60);
    }
  }
  return $data;
}

/**
 * Internal function cu_alerts_data().
 *
 * Function to return the data for use in the block
 * This currently returns the results of remote_data.
 * I put it in this wrapper to make it easier to add
 * possible caching options in the future.
 */
function cu_alerts_data() {
  /* Just return the results of the remote data grab */
  return cu_alerts_remote_data();
}

/**
 * Module defined function to get the remote_url.
 *
 * To read based on the environment, test or production.
 */
function cu_alerts_remote_url() {
  /*Get the current protocol so we can serve up the correct content from either SSL or standard*/
  if (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on') {
    $protocol = 'https://';
  }
  else {
    $protocol = 'http://';
  }

  /* Pull our environment, default to production */
  $environment = variable_get('rave_alerts_environment', 'production');
  if ($environment == 'test') {

    $url = variable_get('rave_alerts_testing_url', '');

  }
  else {
    $url = variable_get('rave_alerts_production_url', '');

  }
  $url_parts = parse_url($url);
  return $protocol . $url_parts['host'] . $url_parts['path'];
}

/**
 * Implements hook_theme().
 */
function cu_alerts_theme($existing, $type, $theme, $path) {
  return array(
    'cu_alerts_alerts' => array(
      'variables' => array('data' => NULL, 'remote_url' => NULL),
      'template' => 'cu_alerts',
    ),
  );
}
