<?php
/**
 * @file
 * Module that pings Drupal's servers for relaying usage statistics.
 */

/**
 * Implements hook_cron().
 *
 * Send usage stats to Drupal update server once a week.
 */
function cu_update_ping_cron() {
  // Only need to do this once a week.
  if (strtotime('+1 week', (int) variable_get('cu_update_ping_time')) <= REQUEST_TIME) {

    // Generate site key to send to drupal.org.
    // The site key is what adds a reported install to useage stats.
    global $base_url;
    $site_key = drupal_hmac_base64($base_url, drupal_get_private_key());

    // Get enabled modules of site to report useage of.
    $enabled_modules = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1")->fetchAll();

    // Loop through each module and ping d.o servers.
    foreach ($enabled_modules as $module) {
      // Reset counter.
      $failed_attempts = 0;

      $info = drupal_parse_info_file(str_replace('.module', '.info', $module->filename));

      // If project has no version or is core module, then skip the ping.
      if (!isset($info['version']) || $info['package'] == 'Core') {
        continue;
      }

      // This url was gathered from update.fetch.inc#152
      $url = 'http://updates.drupal.org/release-history/' . $module->name . '/7.x?site_key=' . $site_key . '&version=' . $info['version'] . '&list=' . $module->name;
      $xml = drupal_http_request($url);

      // If request fails, retry.
      while ($failed_attempts < 2 && $xml->status_message != 'OK') {
        $xml = drupal_http_request($url);
        $failed_attempts++;
      }

      // Write a watchdog message if request fails three times.
      if ($xml->status_message != 'OK') {
        watchdog('cu_update_ping', $module->name . ' didn\'t successfully ping Drupal\'s update servers.');
      }

      // Just in case the Drupal server is suspicious as I am.
      sleep(1);
    }
  }
}
