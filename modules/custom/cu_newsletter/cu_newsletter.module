<?php
/**
 * @file
 * Code for the Newsletter feature.
 */

include_once 'cu_newsletter.features.inc';

function cu_newsletter_menu() {
  $items = array();

  $items['node/%node/email']['theme callback'] = 'cu_newsletter_email_node_theme';
  $items['node/%node/email']['theme arguments'] = array(1);
  $items['node/%node/email']['access callback'] = TRUE;
  $items['node/%node/email']['title'] = t('Email Version');

  $items['admin/newsletter/publish/confirm/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_newsletter_publish_confirm_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('create newsletter content'),
    'title' => 'Publish newsletter and attached articles',
  );
  $items['newsletter/%'] = array(
    'page callback' => 'cu_newsletter_archive_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'title callback' =>'cu_newsletter_archive_page_title',
    'title arguments' => array(1),
  );

  return $items;
}

/**
* Implements hook_menu_alter().
*/
function cu_newsletter_menu_alter(&$items) {

}

function cu_newsletter_access($op, $node) {
  if ($node->type == 'newsletter') {
    return TRUE;
  }
  if (node_access($op, $node)) {
    return TRUE;
  }
  else {
    return TRUE;
  }
}

/**
* For editing page nodes, uses the 'some_other_theme' theme.
*/
function cu_newsletter_email_node_theme($node) {
  $default_theme = variable_get('theme_default','');
  $email_theme = variable_get('email_newsletter_theme', 'cuemail');
  if (node_access('update', $node)) {
    return $node->type == 'newsletter' ? $email_theme : $default_theme;
  }
  else {
    return $default_theme;
  }

}

/**
 * Implements hook_page_alter().
 * Add newsletter css
 */
function cu_newsletter_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'cu_newsletter') . '/css/cu-newsletter.css');
}

/**
 * Implements module_preprocess_page().
 */
function cu_newsletter_preprocess_page(&$vars) {
  if(isset($vars['node']) && $vars['node']->type == "newsletter") {
    if ((arg(0) == 'node') && (arg(2) != 'email')) {
      if (user_access('edit any newsletter content')) {
        $vars['tabs']['#primary'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'path' => 'node/%/email',
            'title' => t('Email Version'),
            'load_functions' => array(
              'node_load',
            ),
            'access_callback' => 'user_access',
            'access_arguments' => array('edit any newsletter content'),
            'tab_root' => 'node/%',
            'tab_parent' => 'node/%',
            'href' => 'node/' . $vars['node']->nid . '/email',

          ),
        );
      }
    }
  }
}

/**
 * Implements module_preprocess_node().
 */
function cu_newsletter_preprocess_node(&$vars) {
  global $theme;
  if ($vars['type'] == 'newsletter' && $vars['view_mode'] == 'full') {
    if ((arg(0) == 'node') && (arg(2) == 'email')) {

      $vars['newsletter_name'] = $vars['field_newsletter_type'][0]['taxonomy_term']->name;
      // Get newsletter design
      $vars['design'] = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_design[LANGUAGE_NONE][0]['value'];
      // Add newsletter image
      if (!empty($vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_name_image)) {
        $newsletter_logo_uri = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_name_image[LANGUAGE_NONE][0]['uri'];
        $vars['newsletter_logo_url'] = image_style_url('medium', $newsletter_logo_uri);
        $vars['newsletter_logo_uri'] = $newsletter_logo_uri;
      }
      // Add newsletter footer
      if (!empty($vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_footer)) {
        $vars['content']['field_newsletter_footer'] = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_footer[LANGUAGE_NONE][0]['value'];
      }
      // Add teaser for email intro
      $newsletter_node = node_load($vars['node']->nid);
      $newsletter = node_view($newsletter_node, 'teaser');
      $vars['content']['teaser'] = !empty($newsletter['body']) ? $newsletter['body'] : array();
    }
    else {
      $vars['column_classes'] = array(
        'main' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
        'sidebar' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
      );
    }

    // Get sections and attached articles
    $articles = array();
    $sections = array_intersect_key($vars['elements']['field_newsletter_section'], element_children($vars['elements']['field_newsletter_section']));
    foreach ($sections as $section) {
      $section_item = $section['entity']['field_collection_item'];
      $section_item = current($section_item);
      if (!empty($section_item['field_newsletter_articles']['#items'])) {
        foreach ($section_item['field_newsletter_articles']['#items'] as $reference) {
          $nid = $reference['target_id'];
          $articles[$nid] = $nid;
        }
      }
    }
    // Get node titles
    if (!empty($articles)) {
      $query = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('n.nid', $articles, 'IN');
      $nodes = $query->execute()->fetchAll();
      $titles = array();
      foreach ($nodes as $node) {
        $titles[] = $node->title;
      }
      $attached_articles = array(
        '#theme' => 'item_list',
        '#items' => $titles,
        '#type' => 'ul',
        '#attributes' => array('class' => 'title-list'),
      );
      $vars['attached_articles'] = render($attached_articles);
    }
  }
}


/**
 * Implements module_preprocess_hook().
 * Build article sections.
 */
function cu_newsletter_preprocess_entity(&$vars) {

  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  // Only preprocess field_newsletter_section field collections
  if ($entity_type == 'field_collection_item' && $bundle == 'field_newsletter_section') {
    // Get view mode to render
    $view_mode = $vars['content']['field_newsletter_display'][0]['#markup'];
    // Get items
    $items = $vars['content']['field_newsletter_section_content'];
    // Get only the children items
    $children = array_intersect_key($items, element_children($items));
    // Count how many articles are in each section
    $content_count = count($children);
    $column_class = $content_count > 1 ? 'col-lg-6 col-md-6 col-sm-6 col-xs-12' : 'col-lg-12 col-md-12 col-sm-12 col-xs-12';

    foreach ($children as $child) {
      $item = current($child['entity']['field_collection_item']);
      // If this contains article references, do those.
      if (!empty($item['field_newsletter_articles'][0]['#markup'])) {
        $nid = $item['field_newsletter_articles'][0]['#markup'];
        $node = node_load($nid);
        $vars['content']['newsletter_content'][$nid] = node_view($node, $view_mode);

        $vars['content']['newsletter_content'][$nid]['#column_class'] = $column_class;
      }
      // Otherwise do the custom text
      elseif (!empty($item['field_nl_section_content_title']) || !empty($item['field_nl_section_content_body'])) {
        $contents = array();
        $contents['title'] = $item['field_nl_section_content_title'];
        $contents['link'] = $item['field_nl_section_content_title']['#items'][0]['url'];
        $contents['body'] = !empty($item['field_nl_section_content_body']) ? $item['field_nl_section_content_body'] : NULL;
        $contents['image'] = !empty($item['field_nl_section_content_image']) ? $item['field_nl_section_content_image'] : NULL;
        $contents['column_class'] = $column_class;
        if ($view_mode == 'email_feature') {
          $vars['content']['newsletter_content'][]['#markup'] = theme('cu_newsletter_custom_content_email_feature', array('content' => $contents));
        }
        if ($view_mode == 'email_teaser') {
          $vars['content']['newsletter_content'][]['#markup'] = theme('cu_newsletter_custom_content_email_teaser', array('content' => $contents));
        }
      }
    }

    unset($vars['content']['field_newsletter_display']);
    unset($vars['content']['field_newsletter_section_content']);
  }
  if ($entity_type == 'field_collection_item' && $bundle == 'field_newsletter_section_content') {
    if (!empty($vars['content']['field_newsletter_articles'])) {
      $nid = $vars['content']['field_newsletter_articles']['#items'][0]['target_id'];
    }
  }
}

/**
 * Implements hook_theme().
 */

function cu_newsletter_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_newsletter') . '/templates';
  $registry['cu_newsletter_block'] = array(
    'template' => 'cu-newsletter-block',
    'path' => $template_dir,
  );
  $registry['cu_newsletter_custom_content_email_teaser'] = array(
    'template' => 'cu-newsletter-custom-content-email-teaser',
    'path' => $template_dir,
  );
  $registry['cu_newsletter_custom_content_email_feature'] = array(
    'template' => 'cu-newsletter-custom-content-email-feature',
    'path' => $template_dir,
  );
  return $registry;
}

/**
 * Implements hook_theme_registry_alter().
 */
function cu_newsletter_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_newsletter');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'field_collection', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

/**
 * Implements hook_image_default_styles().
 */

function cu_newsletter_image_default_styles() {
  $styles = array();



  return $styles;
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_newsletter_node_insert($node) {
  if ($node->type == 'newsletter' && $node->status == 1) {
    $_GET['destination'] = 'admin/newsletter/publish/confirm/' . $node->nid;
  }
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_newsletter_node_update($node) {
  if ($node->type == 'newsletter' && $node->status == 1) {
    //$_GET['destination'] = 'admin/newsletter/publish/confirm/' . $node->nid;
  }
}

/**
 * Publish all referenced nodes.
 */
function _cu_newsletter_publish_nodes($nid) {
  $node = node_load($nid);
  if ($node && ($node->type == 'newsletter')) {
    $status = $node->status;
    $nids = array();
    foreach ($node->field_newsletter_section[LANGUAGE_NONE] as $item) {
      $item = entity_load('field_collection_item', array($item['value']));
      $item = current($item);
      foreach ($item->field_newsletter_section_content[LANGUAGE_NONE] as $content) {
        // Load the field_newsletter_section_content field collection
        // Look to see if there is an article reference and add to array
        $content = entity_load('field_collection_item', array($content['value']));
        $content = current($content);
        if (!empty($content->field_newsletter_articles)) {
          $nids[] = $content->field_newsletter_articles[LANGUAGE_NONE][0]['target_id'];
        }
      }
    }
    // Chunk modules into groups.
    $operations = array();
    foreach ($nids as $nid) {
      $operations[] = array('cu_newsletter_publish_batch', array($nid));
    }

    // Set batch operation and redirect to bundles list when done.
    $batch = array(
      'title' => t('Publishing attached articles'),
      'operations' => $operations,
      'finished' => 'cu_newsletter_publish_batch_finished',
      'init_message' => t('Initializing...'),
      'progress_message' => t('Operation @current out of @total.'),
      'error_message' => t('Articles failed to be published.'),
    );
    batch_set($batch);
    $node->status = 1;
    node_save($node);
    batch_process('node/' . $node->nid);
  }
}

function cu_newsletter_publish_batch($nid) {
  $node_reference = node_load($nid);
  if ($node_reference->status == 0) {
    $node_reference->status = 1;
    node_save($node_reference);
  }
}

function _cu_newsletter_unpublish_nodes($nid) {
  $node = node_load($nid);
  if ($node && ($node->type == 'newsletter')) {
    $node->status = 0;
    node_save($node);
    $message = t('%title has been set to unpublished',
      array(
        '%title' => $node->title,
      )
    );
    drupal_set_message($message);
  }
}
/**
 * Allowed values function for field_newsletter_display.
 */
function _cu_newsletter_display_values() {
  return array(
    'email_teaser' => 'Teaser',
    'email_feature' => 'Feature',
  );
}

/**
 * Implements hook_permission().
 *
 * Add permission for adding a newsletter logo/flag
 */

function cu_newsletter_permission() {
  return array(
    'add newsletter logo' => array(
      'title' => 'Add Newsletter Logo',
      'description' => 'Add a graphic title to the newsletter in place of text.',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set newsletter image field access to false if user doesn't have permission.
 */
function cu_newsletter_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // This gets called on the confirm delete page so need to check for that.
  if ($form['vocabulary_machine_name']['#value'] == 'newsletter' && $form['actions']['submit']['#value'] != 'Delete') {
    if (!user_access('add newsletter logo')) {
      $form['field_newsletter_name_image']['#access'] = FALSE;
    }
    $form['#validate'][] = 'cu_newsletter_path_validate';
    // Hide Description field
    $form['description']['#access'] = FALSE;
  }
}
/**
 * Validation function to handle existing newsletter checks.
 */
function cu_newsletter_path_validate(&$form, &$form_state) {
  $path = $form_state['values']['field_newsletter_path'][LANGUAGE_NONE][0]['value'];
  // If new term added, tid is null so set to -1 for query which is impossible for an entity to have.
  $tid = $form_state['values']['tid'] != NULL ? $form_state['values']['tid'] : -1;

  // Make sure entered value is converted to be path friendly
  if (module_exists('pathauto')) {
    module_load_include('inc', 'pathauto', 'pathauto');
    $path = pathauto_cleanstring($path);
  }

  // Need to check and see if any Newsletter is using this path so it can't be deleted.
  $query = db_select('field_data_field_newsletter_path', 'path');
  $query->fields('path', array('field_newsletter_path_value', 'entity_id'));
  $query->condition('path.field_newsletter_path_value', $path, '=');
  // Make sure the term id assigned to that path is not the term being edited.
  $query->condition('path.entity_id', $tid, '!=');
  $path_results = $query->execute()->fetchAll();
  if ($path_results) {
    form_set_error('field_newsletter_path', t('A newsletter with this path already exists.'));
    // List Newsletters to help user identify where those newsletters are.
    $problem_newsletters = array();
    foreach ($path_results as $result) {
      $problem_newsletters[] = l('node/' . $result->entity_id, 'node/' . $result->entity_id . '/edit');
    }
    drupal_set_message(t('Newsletters with path: !newsletter_list.', array('!newsletter_list' => implode(', ', $problem_newsletters))), 'error');
  }
  // Place formatted path back into form so user can see it.
  $form_state['values']['field_newsletter_path'][LANGUAGE_NONE][0]['value'] = $path;

  // Need to check and see if any Newsletter is using this term so it can't be deleted.
  $query = db_select('field_data_field_newsletter_type', 'type');
  $query->fields('type', array('field_newsletter_type_tid', 'entity_id'));
  $query->condition('type.field_newsletter_type_tid', $form_state['values']['tid'], '=');
  $term_results = $query->execute()->fetchAll();
  if ($term_results) {
    form_set_error('name', t('This term cannot be deleted with existing newsletters.'));
    // List Newsletters to help user identify where those newsletters are.
    $problem_newsletters = array();
    foreach ($term_results as $result) {
      $problem_newsletters[] = l('node/' . $result->entity_id, 'node/' . $result->entity_id . '/edit');
    }
    drupal_set_message(t('Newsletters with name: !newsletter_list.', array('!newsletter_list' => implode(', ', $problem_newsletters))), 'error');
  }
}

/**
 * Implements hook_secure_permissions().
 *
 * Adding permissions for newsletter
 */
function cu_newsletter_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(

    ),
    'authenticated user' => array(

    ),
    'administrator' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter vocabulary terms',
    ),
    'content_editor' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter vocabulary terms',
    ),
    'developer' => array(
      'add newsletter logo',
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter vocabulary terms',
    ),
    'site_owner' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter vocabulary terms',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

function cu_newsletter_design_options() {
  $options = array(
    'design-01' => 'Classic',
    'design-02' => 'Minimal',
    'design-03' => 'Light Boxed',
    'design-04' => 'Dark Boxed',
    'design-05' => 'Simple',
  );
  return $options;
}

/**
 *  Implements hook_form_FORM_ID_alter.
 */
function cu_newsletter_form_newsletter_node_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if there are any newsletter type terms.
  // Display warning if there is no terms.
  if (count($form['field_newsletter_type'][LANGUAGE_NONE]['#options']) < 2) {
    $link = l(t('create a newsletter type'), 'admin/structure/taxonomy/newsletter/add', array('query' => array('destination' => 'node/add/newsletter')));
    $message = "You must first $link before creating a newsletter.";
    drupal_set_message($message, 'warning');
  }
  // Select available term if there is only one term.
  elseif (count($form['field_newsletter_type'][LANGUAGE_NONE]['#options']) == 2) {
    $options = $form['field_newsletter_type'][LANGUAGE_NONE]['#options'];
    $options = array_keys($options);
    $form['field_newsletter_type'][LANGUAGE_NONE]['#default_value'] = $options[1];
  }
  // Add link to add type terms in type field description.
  $link = l(t('Add a newsletter type'), 'admin/structure/taxonomy/newsletter/add', array('query' => array('destination' => 'node/add/newsletter')));
  $message = "Select the type of newsletter. $link.";
  $form['field_newsletter_type'][LANGUAGE_NONE]['#description'] = $message;
  // Add confirmation on submit.
  $form['#submit'][] = 'cu_newsletter_publish_confirm';
  drupal_add_js(drupal_get_path('module', 'cu_newsletter') . '/js/cu-newsletter.js');

}

/**
 * Submit function for cu_newsletter_form_newsletter_node_form_alter().
 *
 * Send user to cu_newsletter_publish_confirm_form if published.
 */
function cu_newsletter_publish_confirm($form, &$form_state) {

  if ($form_state['values']['status'] == 1 && isset($form_state['values']['nid'])) {

    // Check for unpublished attached articles
    $articles = array();
    // Go through each section
    foreach ($form_state['values']['field_newsletter_section'][LANGUAGE_NONE] as $key => $section) {
      if (is_int($key)) {
        foreach ($section['entity']->field_newsletter_section_content[LANGUAGE_NONE] as $article) {
          if (isset($article['field_newsletter_articles'][LANGUAGE_NONE][0]['target_id'])) {
            $articles[] = $article['field_newsletter_articles'][LANGUAGE_NONE][0]['target_id'];

          }
        }
      }
    }
    if (!empty($articles)) {
      // Query to see if any of these are unpublished
      $query = db_select('node', 'n');
      $query->condition('n.type', 'article', '=');
      $query->condition('n.status', 0, '=');
      $query->fields('n', array('nid', 'status'));
      $query->condition('n.nid', $articles, 'in');
      $result = $query->execute();
      $rows = $result->rowCount();

      // If there is an unpublished node, send to confirm form
      if ($rows > 0) {
        $_GET['destination'] = 'admin/newsletter/publish/confirm/' . $form_state['values']['nid'];
      }
    }
  }
}

/**
 * Implements hook_form().
 *
 * Confirm form to check if attached articles should be published.
 * If no, newsletter will be reverted to unpublished.
 */
function cu_newsletter_publish_confirm_form($form, &$form_state, $nid) {
  $form = array();
  $form['message'] = array(
    '#markup' => '<p class="warning"><strong>This newsletter contains references to unpublished content.</strong></p>',
    '#prefix' => '<div>',
    '#suffix' => '</div>',

  );
  // Node ID of newsletter
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $form['newsletter_publishing_options'] = array(
    '#type' => 'radios',
    '#options' => array(
      '0' => t('Save newsletter as unpublished and keep attached articles in their current state'),
      '1' => t('Publish the newsletter and the attached articles'),
    ),
    '#default_value' => '1',
    '#prefix' => '<p>',
    '#suffix' => '</p>',
  );
  $form['newsletter_publish_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#submit' => array('cu_newsletter_publish_submit'),
    '#attributes' => array('class' => array('btn-success')),
  );
  return $form;
}

function cu_newsletter_publish_submit($form, &$form_state) {
  if ($form_state['values']['newsletter_publishing_options']) {
    _cu_newsletter_publish_nodes($form_state['values']['nid']);
    drupal_goto('node/' . $form_state['values']['nid']);
  }
  else {
    _cu_newsletter_unpublish_nodes($form_state['values']['nid']);
    drupal_goto('node/' . $form_state['values']['nid']);
  }
}


/**
 * Page callback function for newsletter/%.
 */
function cu_newsletter_archive_page($newsletter_path) {
  $output = array();
  $term = cu_newsletter_load_by_path($newsletter_path);

  $query = db_select('node', 'n');
  $query->orderBy('created', 'DESC');
  $query = $query->extend('PagerDefault')->limit(10);
  $query->condition('n.type', 'newsletter', '=');
  $query->condition('n.status', 1, '=');
  $query->fields('n', array('nid', 'title', 'sticky'));
  // Add newsletter type condition
  $query->join("field_data_field_newsletter_type", "type", "n.nid = type.entity_id");
  $query->fields('type', array('field_newsletter_type_tid'));
  $query->condition('type.field_newsletter_type_tid', $term->tid, '=');

  $nids = $query->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  $output['newsletters'] = node_view_multiple($nodes, 'teaser');
  $output['newsletters']['#weight'] = 99;
  $output['pager'] = array(
    '#theme' => 'pager',
    '#tags' => array(),
    '#weight' => 100.
  );

  return $output;
}
/**
 * Title callback function for newsletter/%.
 */
function cu_newsletter_archive_page_title($newsletter_path) {
  // This gets called when adding a term via admin/structure/taxonomy/newsletter/add.
  // Not sure why that is, but to skip PHP notice, need to check for request path.
  if (current_path() != 'admin/structure/taxonomy/newsletter/add') {
    $term = cu_newsletter_load_by_path($newsletter_path);
    $term = taxonomy_term_load($term->tid);
    $output = $term->name . ' Archive';
    return $output;
  }

}

/**
 * Returns term name, id, from newsletter term path.
 */
function cu_newsletter_load_by_path($path) {
  $vocab = taxonomy_vocabulary_machine_name_load('newsletter');
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('tid', 'name', 'vid'));
  $query->condition('t.vid', $vocab->vid, '=');
  $query->join("field_data_field_newsletter_path", "path", "t.tid = path.entity_id");
  $query->fields('path', array('field_newsletter_path_value'));
  $query->condition('path.field_newsletter_path_value', $path, '=');
  $term = $query->execute()->fetch();
  return $term;
}
