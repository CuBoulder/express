<?php

/**
 * @file
 * Drupal hooks for cu_users_tests module.
 */

/**
 * Implements hook_menu().
 */
function cu_users_tests_menu(): array {
  return [
    'test-purge-user' => [
      'title' => 'Purge User',
      'page callback' => 'cu_users_purge_user',
      'page arguments' => [1],
      'access arguments' => ['access users overview'],
      'type' => MENU_CALLBACK,
      'weight' => 1,
    ],
    'test-create-user' => [
      'title' => 'Create Test User',
      'page callback' => 'cu_users_create_user',
      'page arguments' => [1, 2, 3],
      'access arguments' => ['access users overview'],
      'type' => MENU_CALLBACK,
      'weight' => 1,
    ],
    'test-create-content' => [
      'title' => 'Create Content For User',
      'page callback' => 'cu_users_create_content',
      'page arguments' => [1],
      'access arguments' => ['access users overview'],
      'type' => MENU_CALLBACK,
      'weight' => 1,
    ],
  ];
}

/**
 * Creates a user with an "identikey" and realname.
 *
 * @param string $user_name
 *   String used for user->name property.
 * @param string $role_name
 *   Role name out of Express user roles.
 * @param string $realname
 *   String used for $user->realname property.
 *
 * @return string
 *   Message of success or error.
 */
function cu_users_create_user(string $user_name, string $role_name, string $realname = ''): string {

  // Get role ID.
  $role = user_role_load_by_name($role_name);
  $new_user = [
    'name' => $user_name,
    'pass' => $user_name,
    'mail' => 'noreply@nowhere.com',
    'status' => 1,
    'init' => 'noreply@nowhere.com',
    'roles' => [
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      $role->rid => $role_name,
    ],
  ];

  try {
    // The first parameter is sent blank so a new user is created.
    $user = user_save('', $new_user);

    db_merge('realname')
      ->key(['uid' => $user->uid])
      ->fields([
        'uid' => $user->uid,
        'realname' => $realname,
        'created' => $user->created,
      ])
      ->execute();

    $new_user = user_load($user->uid);

    return t("Created User {name: '@name', roles: '@role', realname: '@realname'.", [
      '@name' => $new_user->name,
      '@role' => implode(',', array_values($new_user->roles)),
      '@realname' => $new_user->realname,
    ]);
  } catch (Exception $exception) {
    watchdog('cu_users_test', $exception->getMessage());
    return t("Error creating User {name: '@name', roles: '@role', realname: '@realname'.", [
      '@name' => $new_user->name,
      '@role' => implode(',', array_values($new_user->roles)),
      '@realname' => $new_user->realname,
    ]);
  }
}

/**
 * Creates content for a user based on tables from cu_users_get_content_tables().
 *
 * @param string $username
 *   User name or realname for which to create content.
 *
 * @return string
 *   Message of success or error.
 */
function cu_users_create_content(string $username): string {
  $user = cu_users_find_user($username);

  // Create content.
  try {
    // Install text block beans.
    $beans = [];
    $beans[] = [
      'title' => 'Testy Text Block 1',
      'content' => 'Text Block A Content AAA',
      'delta' => 'block-' . $user['uid'] . '01',
    ];

    $beans[] = [
      'title' => 'Testy Text Block 2',
      'content' => 'Text Block B Content BBB',
      'delta' => 'block-' . $user['uid'] . '02',
    ];

    foreach ($beans as $value) {
      $bean = bean_create(['type' => 'block']);
      $bean->label = $value['title'];
      $bean->title = $value['title'];
      $bean->delta = $value['delta'];
      $bean->uid = $user['uid'];
      $bean->field_block_text = [
        LANGUAGE_NONE => [
          [
            'value' => $value['content'],
          ],
        ],
      ];
      $bean->save();
    }

    $node = (object) [
      'type' => 'page',
      'status' => 1,
      'title' => 'Testy Page 1',
      'body' => 'Body for Test Page 1',
      'uid' => $user['uid'],
    ];
    node_save($node);

    $node = (object) [
      'type' => 'page',
      'status' => 1,
      'title' => 'Testy Page 2',
      'body' => 'Body for Test Page 2',
      'uid' => $user['uid'],
    ];
    node_save($node);

    return t("Created content for '@name'.", ['@name' => $user['name']]);
  } catch (Exception $exception) {
    return t("Error creating content for '@name': @error.", [
      '@error' => $exception->getMessage(),
      '@name' => $user['name'],
    ]);
  }
}
