<?php

/**
 * @file
 * Drupal hooks for express_dashboard_lock module.
 */

/**
 * Implements hook_express_dashboard().
 *
 * Adding user Dashboard.
 */
function express_dashboard_lock_express_dashboard($variables) {
  $variables['lock'] = array(
    'title' => 'Lock',
    'callback' => '_express_dashboard_lock_users',
    'weight' => 100,
    'access arguments' => array('dashboard user lock'),
  );
  return $variables;
}

/**
 * Builds dashboard widgets for admin/dashboard/lock.
 */
function _express_dashboard_lock_users() {
  $output = array();

  $output['left']['widgets']['lock']['title'] = t('Lock users from making changes to this site');
  $output['left']['widgets']['lock']['content'] = drupal_get_form('express_dashboard_lock_admin_form');
  return $output;
}

/**
 * Implements hook_form() and builds out lock users options on admin/dashboard/lock.
 */
function express_dashboard_lock_admin_form($form, &$form_state) {
  global $user;
  $form['instructions'] = array(
    '#type' => 'markup',
    '#title' => t('Lock instructions'),
    '#markup' => t('
      <p>This form allows you to lock users from making changes to the site. Users will still be able to log in, but 
       certain pages and forms will be disabled for them. They will not be able to add or edit content and will see the
       message you set below when they try to access a page or form that has been locked.</p>
       <p>It\'s recommended to leave contact information in the message below so that users can contact you about the 
       site.</p>
    ')
  );
  $form['lock_by_role'] = array(
    '#type' => 'checkboxes',
    '#multiple' => TRUE,
    '#title' => t('Lock users based on their role'),
    '#options' => array(
      // The keys for the array are user role ID #s.
      '6' => t('Edit my content'),
      '4' => t('Content editors'),
      '7' => t('Site owners'),
      '3' => t('Administrators'),
    ),
    '#default_value' => variable_get('lock_by_role', array()),
    '#description' => t('Every user with a role selected above will be locked out.'),
  );
  $form['lock_allow_users'] = array(
    '#type' => 'textfield',
    '#multiple' => TRUE,
    '#title' => t('Allow specific users to be exempt from their role\'s lock'),
    '#default_value' => variable_get('lock_allow_users'),
    '#description' => t('Separate usernames with spaces only. For example, "user1 user2 user3".'),
  );
  $form['lock_leave_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Leave a message for locked out users'),
    '#default_value' => variable_get('lock_leave_message', t('This site has been locked. For more information contact the Site Owner.')),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * You can't lock yourself out while submitting the form.
 */
function express_dashboard_lock_admin_form_submit($form, &$form_state) {
  global $user;
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, $value);
  }

  $dont_lock_yourself_out_when_submitting = $form_state['values']['lock_allow_users'];
  $dont_lock_yourself_out_when_submitting .= t(' ') . $user->name;

  $allowed_users = explode(' ', variable_get('lock_allow_users'));

  if (!in_array($user->name, $allowed_users)) {
    variable_set('lock_allow_users', $dont_lock_yourself_out_when_submitting);
  }

  drupal_set_message(t('Lock has been enabled.'));
}

/**
 * Implements hook_permission().
 */
function express_dashboard_lock_permission() {
  return array(
    'dashboard user lock' => array(
      'title' => 'Lock users via the dashboard',
      'description' => 'Allows you to lock out users.',
    ),
  );
}

/**
 * Implements hook_secure_permissions().
 */
function express_dashboard_lock_secure_permissions($role) {
  $permissions = array(
    'administrator' => array(
      'dashboard user lock',
    ),
    'developer' => array(
      'dashboard user lock',
    ),
    'site_owner' => array(
      'dashboard user lock',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Check to see if user->name is in lock_allow_users variable.
 */
function _lock_allow_users_check($username) {
  $output = FALSE;
  $allowed_users = explode(' ', variable_get('lock_allow_users'));

  if (in_array($username, $allowed_users)) {
    $output = TRUE;
  }
  return $output;
}

/**
 * Check roles to see if they have access.
 */
function _lock_by_role_check() {
  global $user;
  $output = FALSE;
  $user_roles = variable_get('lock_by_role');

  foreach (array_keys($user->roles) as $rid) {
    if (in_array($rid, $user_roles)) {
      $output = TRUE;
    }
  }
  return $output;
}

/**
 * Locked or not? If this returns false, you may pass.
 */
function _lock_final_check() {
  global $user;
  $output = FALSE;

  if (isset($user->name)) {
    if (!user_has_role(5) && !_lock_allow_users_check($user->name) && _lock_by_role_check()) {
      $output = TRUE;
    }
  }
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function express_dashboard_lock_form_alter(&$form, &$form_state, $form_id) {
  if (_lock_final_check()) {
    $exceptions = array(
      'user_login',
      'views_exposed_form',
      'ctools_export_ui_list_form',
      'user_external_invite_form',
      'atlas_admin_settings',
    );
    if (!in_array($form_id, $exceptions)) {
      $form['#after_build'][] = '_express_dashboard_lock_recursive';
    }
  }
}

/**
 * If the lock message is set, show it to people.
 */
function express_dashboard_lock_page_alter(&$page) {
  if (_lock_final_check() && variable_get('lock_leave_message')) {
    drupal_set_message(t(variable_get('lock_leave_message')), 'warning');
  }
}

/**
 * Implements hook_menu_alter.
 *
 * Bundle enable isn't an actual form, so we have to alter the menu as well.
 */
function express_dashboard_lock_menu_alter(&$items) {
  if (_lock_final_check()) {
    $items['admin/settings/bundles/list/confirm/%']['page callback'] = 'cu_atlas_redirect';
  }
}

/**
 * Callback function for admin/settings/bundles/list/confirm/%.
 *
 * Redirect away from bundle enable while site is locked for that user.
 */
function express_dashboard_lock_redirect() {
  drupal_set_message(t(variable_get('lock_leave_message')), 'warning');
  return '';
}

/**
 * Recursively disable form elements.
 */
function _express_dashboard_lock_recursive(&$element) {
  foreach (element_children($element) as $name) {
    $element[$name]['#attributes']['disabled'] = 'disabled';
    _cu_atlas_recursive($element[$name]);
  }
  return $element;
}
