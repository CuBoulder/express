<?php
/**
 * @file
 * Code for the Express Layout feature.
 */

include_once 'bean.inline_entity_form.inc';

/**
 * Implements hook_entity_info().
 */
function express_layout_entity_info() {
  $info = array();

  $info['express_layout'] = array(
    'label' => t('Express Layout'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'express_layout',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'layout_id',
      'title' => 'title',
    ),
    'module' => 'express_layout',
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function express_layout_entity_info_alter(&$entity_info) {
  if (isset($entity_info['bean'])) {
    $entity_info['bean']['inline entity form']['controller'] = 'BeanInlineEntityFormController';
  }
  if (module_exists('entitycache')) {
    // Enable Entity Cache support for beans.
    $entity_info['express_layout']['entity cache'] = TRUE;
    // Which means that we don't need to cache the fields.
    $entity_info['express_layout']['field cache'] = FALSE;
  }
}

/**
 * Implements hook_flush_caches().
 */
function express_layout_flush_caches() {
  return array('cache_entity_express_layout');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function express_layout_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}

/**
 * Implements hook_views_api().
 */
function express_layout_views_api($module = NULL, $api = NULL) {
  return array("api" => "3.0");
}

/**
 * Implements hook_menu().
 */
function express_layout_menu() {

  $items['node/%node/layout'] = array(
    'title' => 'Edit Layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_layout_form', 1),
    'access callback' => 'express_layout_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'express_layout.admin.inc',
  );

  $items['admin/config/content/express-layout'] = array(
    'title' => 'Express Layout Settings',
    'description' => 'Configuration options for the Express Layout module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_layout_settings_form'),
    'access arguments' => array('administer express layout'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
    'file' => 'express_layout.admin.inc',
  );

  $items['admin/config/content/express-layout/settings'] = array(
    'title' => 'Layout Regions Configuration',
    'access arguments' => array('administer express layout'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );

  $items['admin/config/content/express-layout/create'] = array(
    'title' => 'Create Layouts',
    'description' => 'Make sure all nodes have layout entities attached to them',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_layout_attach_layouts_form'),
    'access arguments' => array('administer express layout'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'express_layout.admin.inc',
  );

  $items['admin/config/content/express-layout/advanced'] = array(
    'title' => 'Advanced Configuration',
    'description' => 'Advanced configuration for Layout entities',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('express_layout_advanced_configuration_form'),
    'access arguments' => array('administer express layout'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'express_layout.admin.inc',
  );
  $items['express-layout/%'] = array(
    'title' => 'Layout Viewer',
    'page callback' => 'express_layout_view_layout',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}

function express_layout_view_layout($id) {

  return array();
}

/**
 * Implements hook_admin_paths().
 * Set edit layout paths to be admin paths.
 */
function express_layout_admin_paths() {
  $paths = array(
    'node/*/layout' => TRUE,
  );
  return $paths;
}

/**
 * Access callback for node/%node/layout.
 * Check to see if there are layout fields and user has node access.
 */
function express_layout_access($op, $node) {
 $type = variable_get('express_layout_type_' . $node->type, NULL);
  if (user_access('edit express layouts') && $type && !in_array($node->type, variable_get('express_layout_node_type_ignore', array()))) {
    return node_access($op, $node);
  }
  return FALSE;
}

/**
 * Implements hook_permission().
 */
function express_layout_permission() {
  return array(
    'administer express layout' => array(
      'title' => 'Administer Express Layout',
      'description' => 'Configure content types/fields on which to use block selector',
    ),
    'edit express layouts' => array(
      'title' => 'Edit Layouts',
      'description' => 'Edit blocks on layouts',
    ),
  );
}

/**
 * Implements hook_node_insert().
 * Create layout entity each time a node is created.
 */
function express_layout_node_insert($node) {
  // Restrict content types that don't need layouts.
  if (in_array($node->type, variable_get('express_layout_node_type_ignore', array()))) {
    return;
  }
  $nid = $node->nid;
  $values = array(
    'title' => 'Layout: ' . $node->title,
    'node_type' => $node->type,
    'node_id' => $nid,
    'path' => '',
    'layout_type' => 'node',
  );
  $layout = entity_create('express_layout', $values);
  entity_save('express_layout', $layout);
}

/**
 * Implements hook_node_update().
 * Update layout entity each time related node is updated.
 */
function express_layout_node_update($node) {
  // Restrict content types that don't need layouts.
  if (in_array($node->type, variable_get('express_layout_node_type_ignore', array()))) {
    return;
  }
  $nid = $node->nid;
  if ($layout = express_layout_load_layout_single($nid, NULL, 'node')) {
    $layout->title = 'Layout: ' . $node->title;
    entity_save('express_layout', $layout);
  } else {
    $values = array(
      'layout_id' => $layout->layout_id,
      'title' => 'Layout: ' . $node->title,
      'node_type' => $node->type,
      'node_id' => $nid,
      'layout_type' => 'node',
    );
    $layout = entity_create('express_layout', $values);
    entity_save('express_layout', $layout);
  }
}

/**
 * Implements hook_node_delete().
 * Delete layout entity when related node is deleted.
 */
function express_layout_node_delete($node) {
  $nid = $node->nid;
  if ($layout = express_layout_load_layout_single($nid, NULL, 'node')) {
    entity_delete('express_layout', $layout->layout_id);
    drupal_set_message($layout->title . ' Deleted');
  }
}

function _express_layout_form_options() {
  return array(
    'default_layout' => 'Default Layout',
    'feature_layout' => 'Feature Layout',
  );
}

/**
 * Implementation of hook_context_registry().
 */
function express_layout_context_registry() {
  return array(
    'conditions' => array(
      'layout' => array(
        'title' => t('Layout'),
        'description' => t('Set context on a node depending on its layout setting.'),
        'plugin' => 'express_layout_layout_context_condition',
      ),
    ),
  );
}

/**
 * Implementation of hook_context_plugins().
 */
function express_layout_context_plugins() {
  $plugins = array();
  $plugins['express_layout_layout_context_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'express_layout'),
      'file' => 'express_layout.context.inc',
      'class' => 'express_layout_layout_context_condition',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_node_view().
 */
function express_layout_node_view($node, $view_mode) {
  // Define empty array to be passed to execute function.
  $op = array();

  // Fire our context plugin when viewing nodes.
  if ($view_mode == 'full') {
    if ($plugin = context_get_plugin('condition', 'layout')) {
      $plugin->execute($node, $op);
    }

  }
}

/**
 * Implements module_preprocess_hook().
 */
function express_layout_preprocess_html(&$vars) {
  $node = menu_get_object();
  if ($node) {
    $layout = express_layout_load_layout_single($node->nid);
    if ($layout && $layout->field_feature_layout_toggle[LANGUAGE_NONE][0]['value'] == 'feature_layout') {
      $vars['classes_array'][] = 'layout-feature';
    } else {
      $vars['classes_array'][] = 'layout-default';
    }
    if ($layout && !empty($layout->field_feature_title_image)) {
      $vars['classes_array'][] = 'has-feature-title-image';
    }
  }
}

/**
 * Implements hook_image_default_styles().
 *
 * @return array
 *   An array of image styles.
 */
function express_layout_image_default_styles() {
  $styles = array();
  $styles['el_hero'] = array(
    'label' => 'Express Layout Hero Image',
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 1500,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 0,
      ),
    ),
    'name' => 'el_hero', // You need this and the next line to avoid PHP notices
    'storage' => IMAGE_STORAGE_NORMAL,
  );

  return $styles;
}

function express_layout_load_layout_single($nid = NULL, $path = NULL, $type = NULL, $layout_id = NULL) {
  $key = NULL;
  $query = db_select('express_layout', 'el');
  $query->fields('el', array('layout_id', 'node_id', 'path', 'layout_type'));
  if ($nid) {
    $query->condition('el.node_id', $nid, '=');
  }
  if ($path) {
    $query->condition('el.path', $path, '=');
  }
  if ($type) {
    $query->condition('el.layout_type', $type, '=');
  }
  if ($layout_id) {
    $query->condition('el.layout_id', $layout_id, '=');
  }
  $results = $query->execute()->fetch();
  if (isset($results->layout_id)) {
    if ($layout = entity_load_single('express_layout', $results->layout_id)) {
      return $layout;
    }
  }


}

/**
 * Implements hook_page_alter().
 */
function express_layout_page_alter(&$page) {
  // Get node object
  $node = menu_get_object();
  $type = NULL;
  $nid = NULL;
  if ($node) {
    // Load Settings
    $settings = variable_get('express_layout_settings_' . $node->type, array());
    $type = variable_get('express_layout_type_' . $node->type, NULL);
    $nid = $node->nid;
  }
  elseif (arg(0) == 'express-layout') {
    $nid = arg(1);
    $type = 'page';
  }
  //express_layout_load_layout_single($nid);
  if ($nid && $type) {
    express_layout_attach($page, $nid, $type);
  }

  $condition = array(
    'id' => 1,
    'title' => 'Page Master Layout',
    'description' => 'active on basic pages',
    'conditions' => array(
      'node' => array(
        'page',
      ),
    ),
    'layout_id' => 9,
    'status' => 1,
  );
  $condition['conditions'] = serialize($condition['conditions']);
}
function express_layouts_get_master_layouts($args) {

  $layouts = array();
  $query = db_select('express_layout_conditions', 'elc');
  $query->fields('elc', array('id', 'conditions', 'layout_id', 'status'));
  $query->condition('elc.status', 1, '=');

  $masters = $query->execute()->fetchAll();

  foreach ($masters as $master) {
    $conditions = unserialize($master->conditions);
    foreach ($conditions as $type => $condition) {
      if ($type == 'node') {
        if (!empty($condition)) {
          if (in_array($args['node']->type, $condition)) {
            $layouts[] = $master->layout_id;
          }
        }
      }
    }
  }
  return $layouts;
}

function express_layout_attach(&$page, $nid, $type) {
  // Is this a node id that allows custom layouts?
  if (isset($type) && isset($nid) && !path_is_admin(current_path())) {
    // Add css
    drupal_add_css(drupal_get_path('module', 'express_layout') . '/css/express-layout.css');

    // Load node layout
    $layouts = array();
    $layouts[$nid] = $nid;
    if (!empty($_GET['layouts'])) {
      $add_layouts = explode(' ', $_GET['layouts']);
      foreach ($add_layouts as $id) {
        $layouts[$id] = $id;
      }
    }

    // Get layouts from conditions
    $args = array(
      'path' => array(
        'drupal' => current_path(),
        'alias' => drupal_get_path_alias(current_path()),
      ),
      'node' => menu_get_object(),
    );
    $master_layouts = express_layouts_get_master_layouts($args);
    foreach ($master_layouts as $layout) {
      $layouts[$layout] = $layout;
    }

    // Put added layouts into &$page variable so other hooks can use them.
    $page['#express_layouts'] = $layouts;
    $layout_regions = array();
    foreach ($page['#express_layouts'] as $key) {
      if ($layout = express_layout_load_layout_single($key)) {
        // Gather all blocks
        $fields = express_layout_field_to_region_map();
        $deltas = unserialize($layout->weights);
        foreach ($fields as $field => $field_data) {
          $blocks = array();
          $block_output = array();
          if (!empty($layout->{$field})) {
            $region = $field_data['region'];
            // Loop through all referenced beans.
            $beans = array();
            foreach ($layout->{$field}[LANGUAGE_NONE] as $block) {
              $beans[] = $block['target_id'];
            }
            // Load the bean objects
            if (!empty($beans)) {
              $beans = bean_load_multiple($beans);
            }
            // Loop through all bean objects.
            $block_output = array();
            foreach ($beans as $bean) {
              // If user has view access.
              if (bean_access('view', $bean)) {
                // Add to $extra.
                $bid = $bean->bid;
                $delta = $deltas[$field][$bid];

                if ($field == 'field_header'){
                  $layout_regions[$region]['above_content'][$delta] = _express_layout_bean_to_block($bean, $region);
                }
                elseif ($field == 'field_footer') {
                  $layout_regions[$region]['below_content'][$delta] = _express_layout_bean_to_block($bean, $region);
                }
                else {
                  $layout_regions[$region][$delta] = _express_layout_bean_to_block($bean, $region);
                }
              }
            }


            $blocks = array(
              'content' => $block_output,
              '#weight' => $field_data['weight'],
            );
          }

        }
        // Place gathered blocks in regions
        foreach($layout_regions as $region => $blocks) {
          ksort($blocks);
          if ($region == 'content') {
            if (!empty($blocks['above_content'])) {
              $page[$region]['above_content'] = $blocks['above_content'];
              $page[$region]['above_content']['#weight'] = -100;
            }
            if (!empty($blocks['below_content'])) {
              $page[$region]['below_content'] = $blocks['below_content'];
              $page[$region]['below_content']['#weight'] = 100;
            }
          }
          else {
            $page[$region]['layout_blocks'] = $blocks;
          }

          $page[$region]['#sorted'] = FALSE;
        }
      }
    }
    if ($layout = express_layout_load_layout_single($nid)) {

      // Add cover image
      if (!empty($layout->field_feature_title_image[LANGUAGE_NONE][0]['uri']) && isset($settings['field_feature_title_image'])) {
        // Add node title to variables
        $vars['title'] = $node->title;
        if (function_exists('expressbase_breadcrumb')) {
          $vars['breadcrumb'] = expressbase_breadcrumb();
        }

        // Add image style urls to variables
        $img_desktop = image_style_url('hero', $layout->field_feature_title_image [LANGUAGE_NONE][0]['uri']);
        $vars['img_desktop'] = $img_desktop;

        $img_tablet = image_style_url('large', $layout->field_feature_title_image [LANGUAGE_NONE][0]['uri']);
        $vars['img_tablet'] = $img_tablet;

        $img_mobile = image_style_url('medium', $layout->field_feature_title_image [LANGUAGE_NONE][0]['uri']);
        $vars['img_mobile'] = $img_mobile;

        $page['intro']['el_hero_cover_image']['#markup'] = theme('express_layout_title_image', $vars);
      }
      if (isset($settings) && $settings['field_feature_layout_toggle']) {
        // Check feature/default layout setting
        if (!empty($layout->field_feature_layout_toggle[LANGUAGE_NONE][0]['value']) && ($layout->field_feature_layout_toggle[LANGUAGE_NONE][0]['value'] == 'feature_layout') && (!path_is_admin(current_path()))) {
          // Get body content
          $content = $page['content']['system_main']['nodes'][$node->nid]['body'][0]['#markup'];

          // Remove empty paragraphs
          $content = str_replace('<p></p>','',$content);
          $content = mb_convert_encoding($content, 'HTML-ENTITIES', "UTF-8");
          // Make new DOM element
          $dom = new DOMDocument;
          $dom->loadHTML($content);
          $xpath = new DOMXPath($dom);
          // Get top level markup elements
          // These aren't Drupal nodes
          $content_nodes = $xpath->query('*/*');

          $new_content = '';
          foreach ($content_nodes as $content_node) {

            // Get the HTML of each node - for < php 5.3.6
            $newdoc = new DOMDocument();
            $cloned = $content_node->cloneNode(TRUE);
            $newdoc->appendChild($newdoc->importNode($cloned,TRUE));
            $item = $newdoc->saveHTML();
            //for >= php 5.3.6
            //$item = $dom->saveHTML($content_node);

            // If a hero image exists in item, add full width wrapper
            if (strpos($item, 'image-hero') !== FALSE) {
              $new_content .= '<div class="image-full-width">' . utf8_decode($item) .'</div>';
            } else {
              $new_content .= '<div class="content-width-container">' . utf8_decode($item) .'</div>';
            }
          }

          // Copy content from main content region to a new variable
          // page.tpl.php needs to output $page['feature_layout']
          $page['feature_layout'] = $page['content'];
          // Remove main content
          unset($page['content']);
          // Add blank content so edit tabs display
          $page['content']['blank'] = array();
          // Add wrapper element for styling
          $page['feature_layout']['#prefix'] = '<div class="feature-story-wrapper">';
          $page['feature_layout']['#suffix'] = '</div>';
          // Add feature layout formatted content
          $page['feature_layout']['system_main']['nodes'][$node->nid]['body'][0]['#markup'] = $new_content;
          $page['feature_layout']['system_main']['#weight'] = 0;
          // Remove sidebars
          unset($page['sidebar_first']);
          unset($page['sidebar_second']);
        }
      }
    }
  }
}



/**
 * Takes a $bean object and creates a renderable block for placement.
 *
 * @param object $bean
 *   A bean object
 *
 * @param string $region
 *   The region to assign bean to
 *
 * @return array
 *   The converted bean block
 */
function _express_layout_bean_to_block($bean, $region) {
  $block = array();
  if (bean_access('view', $bean)) {
    // Most of this taken from bean_block_view().
    $block['content'] = $bean->view($bean->view_mode);
    $block['subject'] = $bean->title;
    $block['#theme_wrappers'] = array('block');
    $block['#block'] = (object) array(
      'region' => $region,
      'module' => 'bean',
      'delta' => $bean->delta,
      'subject' => $bean->title,
    );
    // Add contextual link to block to edit the bean.
    if (module_exists('contextual')) {
      $block['#contextual_links']['bean'] = array(
        'block',
        array($bean->Identifier()),
      );
      $block['#contextual_links']['block'] = array(
        'admin/structure/block/manage',
        array($block['#block']->module, $block['#block']->delta),
      );

      // If it's a quicktab block, add an additional contextual link
      // and remove bean edit.
      if ($bean->type == 'quicktab') {
        $block['#contextual_links']['quicktabs'] = array(
          'admin/structure/quicktabs/manage',
          array($bean->delta),
        );
        unset($block['#contextual_links']['bean']);
      }
    }
  }
  return $block;
}

/**
 * Implements module_preprocess_hook().
 * Provide theme hook suggestion if feature layout is enabled.
 * node--{type}--featurelayout.tpl.php
 */
function express_layout_preprocess_node(&$vars) {
  // Prevents content region blocks from attempting to be rendered more than once.
  if ('node/' . $vars['nid'] != current_path()) {
    return;
  }

  //$settings = variable_get('express_layout_settings_' . $node->type, array());
  //$type = variable_get('express_layout_type_' . $node->type, NULL);
  $layout = NULL;
  $fields = express_layout_field_to_region_map();
  if ($layout = express_layout_load_layout_single($vars['nid'], NULL, 'node')) {
    if (!empty($layout->field_feature_layout_toggle[LANGUAGE_NONE][0]['value']) && ($layout->field_feature_layout_toggle[LANGUAGE_NONE][0]['value'] == 'feature_layout') && (!path_is_admin(current_path()))) {
      $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__featurelayout';
    }



  }

  // add inner sidebar regions to nodes
  if ($plugin = context_get_plugin('reaction', 'block')) {
    if ($context_content_sidebar_left_blocks = $plugin->block_get_blocks_by_region('content_sidebar_left')) {
      $vars['content_sidebar_left'] = $context_content_sidebar_left_blocks;
      $vars['content_sidebar_left']['#theme_wrappers'] = array('region');
      $vars['content_sidebar_left']['#region'] = 'content_sidebar_left';
      $vars['classes_array'][] = 'content-sidebar-left';
    }
    if ($context_content_sidebar_right_blocks = $plugin->block_get_blocks_by_region('content_sidebar_right')) {
      $vars['content_sidebar_right'] = $context_content_sidebar_right_blocks;
      $vars['content_sidebar_right']['#theme_wrappers'] = array('region');
      $vars['content_sidebar_right']['#region'] = 'content_sidebar_right';
      $vars['classes_array'][] = 'content-sidebar-right';
    }
    if ($context_content_bottom_blocks = $plugin->block_get_blocks_by_region('content_bottom')) {
      $vars['content_bottom'] = $context_content_bottom_blocks;
      $vars['content_bottom']['#theme_wrappers'] = array('region');
      $vars['content_bottom']['#region'] = 'content_bottom';
      $vars['classes_array'][] = 'content-bottom';
    }
  }
  if ($content_sidebar_left_blocks = express_layout_node_region_insert('field_inner_content_left', $layout)) {
    $vars['content_sidebar_left'] = $content_sidebar_left_blocks;
    $vars['content_sidebar_left']['#theme_wrappers'] = array('region');
    $vars['content_sidebar_left']['#region'] = 'content_sidebar_left';
    $vars['classes_array'][] = 'content-sidebar-left';
  }

  if ($content_sidebar_right_blocks = express_layout_node_region_insert('field_inner_content_right', $layout)) {
    $vars['content_sidebar_right'] = $content_sidebar_right_blocks;
    $vars['content_sidebar_right']['#theme_wrappers'] = array('region');
    $vars['content_sidebar_right']['#region'] = 'content_sidebar_right';
    $vars['classes_array'][] = 'content-sidebar-right';
  }
  if ($context_content_bottom_blocks = express_layout_node_region_insert('field_inner_content_bottom', $layout)) {
    $vars['content_bottom'] = $context_content_bottom_blocks;
    $vars['content_bottom']['#theme_wrappers'] = array('region');
    $vars['content_bottom']['#region'] = 'content_bottom';
    $vars['classes_array'][] = 'content-bottom';
  }
  if (!empty($vars['content_sidebar_left']) && !empty($vars['content_sidebar_right'])) {
    $vars['content_sidebar_left']['#region'] = 'content_sidebars';
    $vars['content_sidebar_right']['#region'] = 'content_sidebars';
  }
}

/**
 * Implements hook_secure_permissions().
 *
 * Adding permissions for express layouts.
 */
function express_layout_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(

    ),
    'authenticated user' => array(

    ),
    'administrator' => array(
      'edit express layouts',
    ),
    'content_editor' => array(
      'edit express layouts',
    ),
    'developer' => array(
      'administer express layout',
      'edit express layouts',
    ),
    'site_owner' => array(
      'edit express layouts',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

function express_layout_field_widget_form_alter(&$element, &$form_state, $context)	{
  // Get entity layout fields
  $fields = field_info_instances('express_layout', 'express_layout');
  unset($fields['field_feature_layout_toggle']);
  unset($fields['field_feature_title_image']);
  // Build array of fields
  $selector_fields = array();
  foreach ($fields as $key => $field) {
    $selector_fields[$key] = $key;
  }

  if (!empty($element['#field_name']) && (in_array($element['#field_name'], $selector_fields))) {
    // Add 'or' separator between submit actions
    if (isset($element['actions']['ief_add']) && isset($element['actions']['ief_add_existing'])) {
      $element['actions']['ief_add']['#weight'] = 10;
      $element['actions']['ief_add_existing']['#weight'] = 12;
      $element['actions']['ief_separator'] = array(
        '#markup' => '<span class="ief-separator">or</span>',
        '#weight' => 11,
      );

      // Add 'Add New Block' label to available options and add class
      $element['actions']['bundle']['#empty_option'] = t('Add new block');
      //$element['actions']['bundle']['#options']['add_new'] = t('Add new block');
      $element['actions']['bundle']['#attributes']['class'][] = 'new-block-options';
      // Add ajax from submit to select menu

      $element['actions']['bundle']['#ajax'] = $element['actions']['ief_add']['#ajax'];
      $element['actions']['bundle']['#ajax']['event'] = 'change';
      $element['actions']['bundle']['#ajax']['trigger_as'] = array('name' => $element['actions']['ief_add']['#name']);
      // Hide add new submit action
      $element['actions']['ief_add']['#attributes']['class'][] = 'element-invisible';

      $option_array =  $element['actions']['bundle']['#options'];

      // Remove beans where the user isn't specifically allowed to create
      foreach ($option_array as $key => $option) {
        if (!express_layout_bean_access_check($key)) {
          unset($option_array[$key]);
        }
      }
      // Sort bean types by label instead of key/machine name
      asort($option_array);
      $element['actions']['bundle']['#options'] = $option_array;
    }
  }
}
/**
 * Variation of bean_access that only checks create permission
 */
function express_layout_bean_access_check($type) {
  $perm = 'create any ' . $type . ' bean';
  if (user_access($perm)) {
    return TRUE;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function express_layout_theme_registry_alter(&$registry) {
  $registry['inline_entity_form_entity_table']['function'] = 'express_layout_inline_entity_form_entity_table';
}

/**
 * Copied from inline_entity_form.module.
 * Overrides how beans are displayed in the IEF table for title/label.
 *
 * Themes the table showing existing entity references in the widget.
 *
 * @param $variables
 *   Contains the form element data from $element['entities'].
 */
function express_layout_inline_entity_form_entity_table($variables) {
  $form = $variables['form'];
  $entity_type = $form['#entity_type'];
  $fields = $form['#table_fields'];
  // Sort the fields by weight.
  uasort($fields, 'drupal_sort_weight');
  // If one of the rows is in form context, disable tabledrag.
  $has_tabledrag = TRUE;
  foreach (element_children($form) as $key) {
    if (!empty($form[$key]['form'])) {
      $has_tabledrag = FALSE;
    }
  }

  $header = array();
  if ($has_tabledrag) {
    $header[] = array('data' => '', 'class' => array('ief-tabledrag-header'));
    $header[] = array('data' => t('Sort order'), 'class' => array('ief-sort-order-header'));
  }
  // Add header columns for each field.
  $first = TRUE;
  foreach ($fields as $field_name => $field) {
    $column = array('data' => $field['label']);
    // The first column gets a special class.
    if ($first) {
      $column['class'] = array('ief-first-column-header');
      $first = FALSE;
    }
    $header[] = $column;
  }
  $header[] = t('Operations');

  // Build an array of entity rows for the table.
  $rows = array();
  foreach (element_children($form) as $key) {
    $entity = $form[$key]['#entity'];
    list($entity_id) = entity_extract_ids($entity_type, $entity);
    // Many field formatters (such as the ones for files and images) need
    // certain data that might be missing on unsaved entities because the field
    // load hooks haven't run yet. Because of that, those hooks are invoked
    // explicitly. This is the same trick used by node_preview().
    if ($form[$key]['#needs_save']) {
      _field_invoke_multiple('load', $entity_type, array($entity_id => $entity));
    }

    $row_classes = array('ief-row-entity');
    $cells = array();
    if ($has_tabledrag) {
      $cells[] = array('data' => '', 'class' => array('ief-tabledrag-handle'));
      $cells[] = drupal_render($form[$key]['delta']);
      $row_classes[] = 'draggable';
    }
    // Add a special class to rows that have a form underneath, to allow
    // for additional styling.
    if (!empty($form[$key]['form'])) {
      $row_classes[] = 'ief-row-entity-form';
    }

    // Add fields that represent the entity.
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    foreach ($fields as $field_name => $field) {
      $data = '';
      if ($field['type'] == 'property') {
        // Small 'hack' for beans to correctly get title/label.
        if ($entity_type == 'bean') {
          $data = $entity->{$field_name};
        }
        else {
          $property = $wrapper->{$field_name};
          // label() returns human-readable versions of token and list properties.
          $data = $property->label() ? $property->label() : $property->value();
        }
        $data = empty($field['sanitized']) ? check_plain($data) : $data;
      }
      elseif ($field['type'] == 'field' && isset($entity->{$field_name})) {
        $display = array(
            'label' => 'hidden',
          ) + $field;
        // The formatter needs to be under the 'type' key.
        if (isset($display['formatter'])) {
          $display['type'] = $display['formatter'];
          unset($display['formatter']);
        }

        $renderable_data = field_view_field($entity_type, $entity, $field_name, $display);
        // The field has specified an exact delta to display.
        if (isset($field['delta'])) {
          if (!empty($renderable_data[$field['delta']])) {
            $renderable_data = $renderable_data[$field['delta']];
          }
          else {
            // The field has no value for the specified delta, show nothing.
            $renderable_data = array();
          }
        }
        $data = drupal_render($renderable_data);
      }
      elseif ($field['type'] == 'callback' && isset($field['render_callback']) && function_exists($field['render_callback'])) {
        $data = call_user_func($field['render_callback'], $entity_type, $entity);
      }

      $cells[] = array('data' => $data, 'class' => array('inline-entity-form-' . $entity_type . '-' . $field_name));
    }
    // Add the buttons belonging to the "Operations" column.
    $cells[] = drupal_render($form[$key]['actions']);
    // Create the row.
    $rows[] = array('data' => $cells, 'class' => $row_classes);

    // If the current entity array specifies a form, output it in the next row.
    if (!empty($form[$key]['form'])) {
      $row = array(
        array('data' => drupal_render($form[$key]['form']), 'colspan' => count($fields) + 1),
      );
      $rows[] = array('data' => $row, 'class' => array('ief-row-form'), 'no_striping' => TRUE);
    }
  }

  if (!empty($rows)) {
    $id = 'ief-entity-table-' . $form['#id'];
    if ($has_tabledrag) {
      // Add the tabledrag JavaScript.
      drupal_add_tabledrag($id, 'order', 'sibling', 'ief-entity-delta');
    }

    // Return the themed table.
    $table_attributes = array(
      'id' => $id,
      'class' => array('ief-entity-table'),
    );
    return theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => FALSE, 'attributes' => $table_attributes));
  }
}

function express_layout_theme() {
  $registry = array();
  $template_dir = drupal_get_path('module', 'express_layout') . '/templates';
  $registry['express_layout_title_image'] = array(
    'template' => 'express-layout-title-image',
    'path' => $template_dir,
  );
  return $registry;
}

function express_layout_field_to_region_map($field = NULL) {
  $fields = array(
    'field_header' => array(
      'region' => 'content',
      'weight' => '-100',
    ),
    'field_footer' => array(
      'region' => 'content',
      'weight' => '100',
    ),
    'field_sidebar_first' => array(
      'region' => 'sidebar_first',
      'weight' => '-100',
    ),
    'field_sidebar_second' => array(
      'region' => 'sidebar_second',
      'weight' => '-100',
    ),
    'field_intro' => array(
      'region' => 'intro',
      'weight' => '-100',
    ),
    'field_slider' => array(
      'region' => 'slider',
      'weight' => '-100',
    ),
    'field_wide_2' => array(
      'region' => 'wide_2',
      'weight' => '-100',
    ),
    'field_inner_content_right' => array(
      'region' => 'content_sidebar_right',
      'weight' => '-100',
    ),
    'field_inner_content_left' => array(
      'region' => 'content_sidebar_left',
      'weight' => '-100',
    ),
  );
  if ($field) {
    return $fields[$field];
  }
  return $fields;
}

/**
 * Inserts layout blocks into node regions.
 */
function express_layout_node_region_insert($field = NULL, $layout = NULL) {
  if ($field && $layout) {
    $fields = express_layout_field_to_region_map();
    $region_blocks = array();
    if (!empty($layout->{$field})) {
      $region = $fields[$field]['region'];
      // Loop through all referenced beans.
      $beans = array();
      foreach ($layout->{$field}[LANGUAGE_NONE] as $block) {
        $beans[] = $block['target_id'];
      }
      // Load the bean objects
      if (!empty($beans)) {
        $beans = bean_load_multiple($beans);
      }
      // Loop through all bean objects.
      $block_output = array();
      foreach ($beans as $bean) {
        // If user has view access.
        if (bean_access('view', $bean)) {
          // Add to $extra.
          $block_output[] = _express_layout_bean_to_block($bean, $region);
        }
      }
      foreach ($block_output as $output) {
        $region_blocks[] = $output;
      }
      return $region_blocks;
    }

  }
}
